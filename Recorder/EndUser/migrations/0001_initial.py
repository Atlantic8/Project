# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-05 13:28
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('vip', models.BooleanField(default=False)),
                ('wholesale', models.BooleanField(default=True)),
                ('customer_name', models.CharField(max_length=30, unique=True)),
                ('contact', models.CharField(max_length=40)),
                ('address', models.CharField(default='', max_length=100)),
                ('info', models.CharField(default='none', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('store_name', models.CharField(max_length=30, primary_key=True, serialize=False, unique=True)),
                ('store_address', models.CharField(default='', max_length=100)),
                ('contact', models.CharField(max_length=40)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EndUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('permission', models.CharField(default='1', max_length=1)),
                ('store_name', models.CharField(max_length=20, null=True)),
                ('discount', models.CharField(default='100', max_length=4)),
                ('cart', models.CharField(default='', max_length=1000)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
